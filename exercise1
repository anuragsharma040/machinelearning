import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import joblib

# Load your data
# Replace 'path/to/your/data.csv' with the actual path to your CSV file
file_path = 'path/to/your/data.csv'
df = pd.read_csv(file_path)

# Separate features (X) and target (y)
X = df.drop('Output', axis=1)
y = df['Output']

# Convert categorical columns to numeric using Label Encoding
label_encoder = LabelEncoder()
X_encoded = X.apply(label_encoder.fit_transform)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

# Initialize a Random Forest Classifier
model = RandomForestClassifier(random_state=42)

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
predictions = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, predictions)
print(f'Accuracy: {accuracy}')

# Save the trained model for future use
model_filename = 'trained_model.joblib'
joblib.dump(model, model_filename)
print(f'Trained model saved as {model_filename}')

# Now, you can use the trained model to make predictions on new data
# For example, if you have a new_data DataFrame with the same features as your training data
# new_data_encoded = new_data.apply(label_encoder.transform)
# new_predictions = model.predict(new_data_encoded)
# print('Predictions for new data:', new_predictions)
